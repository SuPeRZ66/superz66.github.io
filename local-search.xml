<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>如何创建一个基于vue的npm包</title>
    <link href="/2023/02/27/npmpackagesetup/"/>
    <url>/2023/02/27/npmpackagesetup/</url>
    
    <content type="html"><![CDATA[<p>##前言<br>说来惭愧写了这么多年前端，用了这么多别人的包。最近项目中用到一个库没有 vue3 的版本所以打算在业余时间造个轮子。先来说下 npm 包的发布流程吧。后续会更新我的 npm 包的具体文档。</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="1-创建-npm-账号"><a href="#1-创建-npm-账号" class="headerlink" title="1.创建 npm 账号"></a>1.创建 npm 账号</h3><p>想要创建 npm 包首先得创建一个 npm 账号<br><code>https://www.npmjs.com/</code><br>期间可能会被墙需要挂梯子</p><h3 id="2-创建一个-vue3-项目"><a href="#2-创建一个-vue3-项目" class="headerlink" title="2.创建一个 vue3 项目"></a>2.创建一个 vue3 项目</h3><p><code>npm create vite@latest my-vue-app -- --template vue</code></p><h3 id="3-修改-vite-config-js"><a href="#3-修改-vite-config-js" class="headerlink" title="3.修改 vite.config.js"></a>3.修改 vite.config.js</h3><p>修改 vite 打包的相关配置</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">build:</span> <span class="hljs-punctuation">&#123;</span><br><span class="hljs-symbol">  lib:</span> <span class="hljs-punctuation">&#123;</span><br><span class="hljs-symbol">    entry:</span> path.resolve(__dirname, <span class="hljs-string">&quot;src/your_enter_file_path/index.js&quot;</span>), <span class="hljs-comment">//这边的路径为npm包的入口文件</span><br><span class="hljs-symbol">    name:</span> <span class="hljs-string">&quot;your_global_name&quot;</span>,<span class="hljs-comment">//暴露的全局变量名称</span><br><span class="hljs-symbol">    fileName:</span> <span class="hljs-string">&quot;your_file_name&quot;</span>, <span class="hljs-comment">//输出的包文件名</span><br>  <span class="hljs-punctuation">&#125;</span>,<br><span class="hljs-symbol">  rollupOptions:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-comment">// 确保外部化处理那些你不想打包进库的依赖</span><br><span class="hljs-symbol">    external:</span> [<span class="hljs-string">&quot;vue&quot;</span>,],<br><span class="hljs-symbol">    output:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-comment">// 在 UMD 构建模式下为这些外部化的依赖提供一个全局变量</span><br><span class="hljs-symbol">      globals:</span> <span class="hljs-punctuation">&#123;</span><br><span class="hljs-symbol">        vue:</span> <span class="hljs-string">&quot;Vue&quot;</span>,<br>      <span class="hljs-punctuation">&#125;</span>,<br>    <span class="hljs-punctuation">&#125;</span>,<br>  <span class="hljs-punctuation">&#125;</span>,<br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="3-修改-package-json"><a href="#3-修改-package-json" class="headerlink" title="3.修改 package.json"></a>3.修改 package.json</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;your_npm_name&quot;</span>, <span class="hljs-regexp">//</span>这边是上传到npm的包名也就是npm i &lt;your_npm_package_name&gt; 最好不要起以@开头的包<br><span class="hljs-string">&quot;private&quot;</span>: false,<span class="hljs-regexp">//</span>需要设置非私有包 不然需要付费<br><span class="hljs-string">&quot;files&quot;</span>: [<br>    <span class="hljs-string">&quot;dist&quot;</span> <span class="hljs-regexp">//</span>打包文件所在文件夹<br>  ],<br> <span class="hljs-string">&quot;main&quot;</span>: <span class="hljs-string">&quot;./dist/your_file_name.umd.cjs&quot;</span>, <span class="hljs-regexp">//</span>   使用require规范引入会响应该对象<br> <span class="hljs-string">&quot;module&quot;</span>: <span class="hljs-string">&quot;./dist/your_file_name.js&quot;</span>,<span class="hljs-regexp">//</span> es module规范使用import能导入<br> <span class="hljs-string">&quot;types&quot;</span>: <span class="hljs-string">&quot;dist/your_file_name.d.ts&quot;</span>,<span class="hljs-regexp">//</span>如果是ts要加这个<br> <span class="hljs-string">&quot;exports&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;.&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;import&quot;</span>: <span class="hljs-string">&quot;./dist/your_file_name.js&quot;</span>, <span class="hljs-regexp">//</span>指定导出模块 es module<br>      <span class="hljs-string">&quot;require&quot;</span>: <span class="hljs-string">&quot;./dist/your_file_name.umd.cjs&quot;</span> <span class="hljs-regexp">//</span>指定导出模块 require模式<br>    &#125;,<br>    <span class="hljs-string">&quot;./dist/style.css&quot;</span>: <span class="hljs-string">&quot;./dist/style.css&quot;</span> <span class="hljs-regexp">//</span>导出css<br>  &#125;<br></code></pre></td></tr></table></figure><p>通过<code>npm run build</code> 会在根目录的 dist 文件夹下面出现<br>1.your_file_name.umd.cjs<br>2.your_file_name.js<br>3.style.css<br>4.your_file_name.d.ts //如果用 ts</p><h2 id="4-发布到-npm"><a href="#4-发布到-npm" class="headerlink" title="4.发布到 npm"></a>4.发布到 npm</h2><p>在项目根目录执行<br><code>npm login</code><br>输入账号密码登陆成功后执行<br><code>npm publish --access=publish</code><br>等待发布成功</p><h2 id="5-如何测试-npm-包"><a href="#5-如何测试-npm-包" class="headerlink" title="5.如何测试 npm 包"></a>5.如何测试 npm 包</h2><p>首先在 vue1 项目根目录执行<code>npm link</code><br>然后在测试 vue2 项目根目录执行 <code>npm link vue1</code></p><h2 id="完结-撒花-🎉🎉🎉"><a href="#完结-撒花-🎉🎉🎉" class="headerlink" title="完结 撒花 🎉🎉🎉"></a>完结 撒花 🎉🎉🎉</h2>]]></content>
    
    
    
    <tags>
      
      <tag>npm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mbp(m1芯片)前端开发环境配置</title>
    <link href="/2023/02/25/m1macsetup/"/>
    <url>/2023/02/25/m1macsetup/</url>
    
    <content type="html"><![CDATA[<h2 id="mac-必备包管理工具-homebrew"><a href="#mac-必备包管理工具-homebrew" class="headerlink" title="mac 必备包管理工具 homebrew"></a>mac 必备包管理工具 homebrew</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/bin/</span>zsh -c <span class="hljs-string">&quot;$(curl -fsSL https://gitee.com/huwei1024/HomebrewCN/raw/master/Homebrew.sh)&quot;</span><br></code></pre></td></tr></table></figure><p>按照脚本提示安装好 homebrew 后在命令行中输入<br><code>brew -- version </code><br>提示版本信息后表示安装成功</p><h2 id="nodejs-版本管理工具-nvm"><a href="#nodejs-版本管理工具-nvm" class="headerlink" title="nodejs 版本管理工具 nvm"></a>nodejs 版本管理工具 nvm</h2><p>对于前端来说不同项目对于 node 的版本依赖会有不同所以需要一个管理 node 版本的工具来方便切换 node 环境。其实 docker 也可以实现类似需求但我更推荐使用 nvm<br>我们使用 homebrew 来安装 nvm<br><code>brew install nvm</code><br>安装完成后在我们的～/.zshrc 文件中加入</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs livescript"><span class="hljs-keyword">export</span> NVM_DIR=<span class="hljs-string">&quot;$HOME/.nvm&quot;</span><br>  [ -s <span class="hljs-string">&quot;/opt/homebrew/opt/nvm/nvm.sh&quot;</span> ] &amp;&amp; <span class="hljs-string">\.</span> <span class="hljs-string">&quot;/opt/homebrew/opt/nvm/nvm.sh&quot;</span>  <span class="hljs-comment"># This loads nvm</span><br>  [ -s <span class="hljs-string">&quot;/opt/homebrew/opt/nvm/etc/bash_completion.d/nvm&quot;</span> ] &amp;&amp; <span class="hljs-string">\.</span> <span class="hljs-string">&quot;/opt/homebrew/opt/nvm/etc/bash_completion.d/nvm&quot;</span>  <span class="hljs-comment"># This loads nvm bash_completion</span><br></code></pre></td></tr></table></figure><p>这样就可以在 zsh 中使用愉快的使用 node 命令或者 npm 全局安装的命令了。</p><h2 id="打造舒适的终端"><a href="#打造舒适的终端" class="headerlink" title="打造舒适的终端"></a>打造舒适的终端</h2><p>1、item2<br><code>https://iterm2.com/downloads.html</code><br>2、oh my zsh</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">sh -c <span class="hljs-string">&quot;<span class="hljs-subst">$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)</span>&quot;</span><br><br></code></pre></td></tr></table></figure><p>3、spaceship(oh my zsh 美化)<br>4、git autojump zsh-autosuggestions zsh-syntax-highlighting（oh my zsh 插件）<br>5、fortune + cowsay 打造有趣的命令行界面<br><img src="/img/cowsay.png"></p><h2 id="vscode-插件推荐"><a href="#vscode-插件推荐" class="headerlink" title="vscode 插件推荐"></a>vscode 插件推荐</h2><ol><li> auto close tag</li><li> auto import</li><li> auto rename tag</li><li> docker</li><li> error lens</li><li> gitlens</li><li> image preview</li><li> live server</li><li> power mode</li><li>prettier</li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>mbp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue hooks</title>
    <link href="/2023/02/24/vuehooks/"/>
    <url>/2023/02/24/vuehooks/</url>
    
    <content type="html"><![CDATA[<h3 id="什么是-hooks？"><a href="#什么是-hooks？" class="headerlink" title="什么是 hooks？"></a>什么是 hooks？</h3><p>字面意思是”钩子“，其实是指系统运行到某一时期时，会调用被注册到该时机的回调函数。</p><h3 id="vue-中的-hooks"><a href="#vue-中的-hooks" class="headerlink" title="vue 中的 hooks"></a>vue 中的 hooks</h3><p>在 vue 中代表 hooks 的就是组合式 api。以 “use” 作为开头的，提供方法复用、组件状态管理等功能的合集。</p><h3 id="hooks-的好处"><a href="#hooks-的好处" class="headerlink" title="hooks 的好处"></a>hooks 的好处</h3><p>在 vue2 中，要抽离公共逻辑以及相关的生命周期只能用 mixin，而 mixin 的缺点是不知道方法来自哪的。<br>比如</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs stylus">mixins:<span class="hljs-selector-attr">[a,b,c]</span><br><span class="hljs-function"><span class="hljs-title">created</span><span class="hljs-params">()</span></span>&#123;<br>    let from_mixin = this<span class="hljs-selector-class">.abc</span><br>    this<span class="hljs-selector-class">.foo</span>()<br>    this<span class="hljs-selector-class">.bar</span>() <span class="hljs-comment">//我们并不知道变量abc以及foo，bar方法是从哪个mixin调用的，如果mixin数量众多，可能会引起变量重名等问题，那将会是可怕的。</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="相比-vue2，组合式-api-的好处"><a href="#相比-vue2，组合式-api-的好处" class="headerlink" title="相比 vue2，组合式 api 的好处"></a>相比 vue2，组合式 api 的好处</h3><p>vue2 的 class 写法导致代码块是分散的，比如定义方法，以及生命周期以及各种 this 指向问题。这在单页应用中如果功能复杂并且引入了很多 mixin 的话可读性非常差。<br>vue3 中使用函数式编程配合组合式 api 可以让代码逻辑更加清晰</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//首先以vue2为例</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span>&#123;<br>    <span class="hljs-attr">mixins</span>: [amixins],<br>    <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-keyword">return</span>&#123;<br>            <span class="hljs-attr">a</span>:<span class="hljs-number">1</span>,<br>            <span class="hljs-attr">b</span>:<span class="hljs-number">2</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-title function_">mounted</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">foo</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">c</span>)<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">bar</span>()<br>    &#125;,<br>    <span class="hljs-attr">method</span>:&#123;<br>        <span class="hljs-title function_">foo</span>(<span class="hljs-params"></span>)&#123;<br>            <span class="hljs-keyword">let</span> d = <span class="hljs-variable language_">this</span>.<span class="hljs-property">a</span>+<span class="hljs-variable language_">this</span>.<span class="hljs-property">b</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-comment">//vue3组合式api写法</span><br>const a= <span class="hljs-built_in">ref</span>(<span class="hljs-number">1</span>)<br>const <span class="hljs-selector-tag">b</span> = <span class="hljs-built_in">ref</span>(<span class="hljs-number">2</span>)<br>const &#123;c,bar&#125; = <span class="hljs-built_in">useHooks</span>()<br>const foo = ()=&gt;&#123;<br>    let d = <span class="hljs-selector-tag">a</span>.value+<span class="hljs-selector-tag">b</span><span class="hljs-selector-class">.value</span><br>&#125;<br><span class="hljs-function"><span class="hljs-title">onMounted</span><span class="hljs-params">(()</span></span>=&gt;&#123;<br>    <span class="hljs-built_in">foo</span>(c)<br>    <span class="hljs-built_in">bar</span>()<br>&#125;)<br><br></code></pre></td></tr></table></figure><p>结果一目了然</p>]]></content>
    
    
    
    <tags>
      
      <tag>vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>扩展插件的ts类型</title>
    <link href="/2023/02/22/ts/"/>
    <url>/2023/02/22/ts/</url>
    
    <content type="html"><![CDATA[<h2 id="为插件配置-ts-定义"><a href="#为插件配置-ts-定义" class="headerlink" title="为插件配置 ts 定义"></a>为插件配置 ts 定义</h2><p>在日常开发中会碰到一些仓库没有定义 ts 类型。<br>以 vite 为例，在 src 目录新建 xxx.d.ts</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs fsharp">declare <span class="hljs-keyword">module</span> <span class="hljs-string">&quot;foo&quot;</span> &#123;<br>  <span class="hljs-keyword">namespace</span> <span class="hljs-keyword">bar</span> &#123;<br>    <span class="hljs-keyword">function</span> xxx(<span class="hljs-keyword">type</span><span class="hljs-operator">:</span> <span class="hljs-type">string</span>, opt<span class="hljs-operator">?</span>)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>假如碰到部分插件没有 ts 定义，但它是基于其他插件的，其他插件有 ts 定义。<br>这边以 jquery 为例子，假设有个插件为$(“foo”).bar()<br>我们需要为$对象扩展 bar 的定义,只需要在 xxx.d.ts 添加</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">declare</span> <span class="hljs-variable language_">global</span> &#123;<br>  <span class="hljs-keyword">interface</span> <span class="hljs-title class_">JQuery</span> &#123; <span class="hljs-comment">//这边的JQuery要和Jquery.d.ts文件里定义的名字一样</span><br>    <span class="hljs-title function_">bar</span>(arg?: <span class="hljs-built_in">any</span>): <span class="hljs-title class_">JQuery</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>typescript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>网易云会员</title>
    <link href="/2023/02/22/cloudmusic/"/>
    <url>/2023/02/22/cloudmusic/</url>
    
    <content type="html"><![CDATA[<h2 id="每月网抑云时间"><a href="#每月网抑云时间" class="headerlink" title="每月网抑云时间"></a>每月网抑云时间</h2><p>无声小丑送您一张会员礼品卡，快来看看 TA 的祝福吧! <a href="https://music.163.com/prime/m/gift-receive?d=o6u3LtehT1taCMQ0aarfLw&amp;p=yXrEarHg3gY_MfTsvXh2Gh74Yod84NP-AmfV-ZPy0av_Psw6x5g63kZTDdoKyuXIr05xMebflkPcM9A0_sZM8187rU7M1TGIbQXCCBInUJM&amp;userid=70753581&amp;app_version=8.9.10&amp;dlt=0846">https://music.163.com/prime/m/gift-receive?d=o6u3LtehT1taCMQ0aarfLw&amp;p=yXrEarHg3gY_MfTsvXh2Gh74Yod84NP-AmfV-ZPy0av_Psw6x5g63kZTDdoKyuXIr05xMebflkPcM9A0_sZM8187rU7M1TGIbQXCCBInUJM&amp;userid=70753581&amp;app_version=8.9.10&amp;dlt=0846</a> (@网易云音乐)</p>]]></content>
    
    
    
    <tags>
      
      <tag>网易云</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
